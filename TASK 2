import csv
from fpdf import FPDF
from datetime import datetime

class PDFReportGenerator:
    def __init__(self, data_file, output_file="report.pdf"):
        self.data_file = data_file
        self.output_file = output_file
        self.data = []
        self.analysis_results = {}
        
    def load_data(self):
        """Load data from CSV file"""
        try:
            with open(self.data_file, mode='r') as file:
                csv_reader = csv.DictReader(file)
                for row in csv_reader:
                    self.data.append(row)
            return True
        except FileNotFoundError:
            print(f"Error: File '{self.data_file}' not found.")
            return False
        except Exception as e:
            print(f"Error reading file: {e}")
            return False
    
    def analyze_data(self):
        """Perform basic data analysis"""
        if not self.data:
            return False
            
        # Count number of records
        self.analysis_results['total_records'] = len(self.data)
        
        # Get column names
        self.analysis_results['columns'] = list(self.data[0].keys())
        
        # Calculate averages for numeric columns
        numeric_columns = []
        for col in self.analysis_results['columns']:
            try:
                values = [float(row[col]) for row in self.data if row[col]]
                if values:
                    numeric_columns.append(col)
                    self.analysis_results[f'avg_{col}'] = sum(values) / len(values)
            except ValueError:
                pass
        
        self.analysis_results['numeric_columns'] = numeric_columns
        return True
    
    def generate_report(self):
        """Generate PDF report"""
        if not self.load_data():
            return False
        if not self.analyze_data():
            return False
            
        pdf = FPDF()
        pdf.add_page()
        
        # Set font and colors
        pdf.set_font("Arial", 'B', 16)
        pdf.set_text_color(0, 0, 128)  # Navy blue
        
        # Add header
        pdf.cell(0, 10, "CODTECH INTERNSHIP REPORT", ln=1, align='C')
        pdf.ln(10)
        
        # Report details
        pdf.set_font("Arial", '', 12)
        pdf.set_text_color(0, 0, 0)  # Black
        pdf.cell(0, 10, f"Report generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", ln=1)
        pdf.cell(0, 10, f"Data source: {self.data_file}", ln=1)
        pdf.ln(5)
        
        # Data summary
        pdf.set_font("Arial", 'B', 14)
        pdf.set_text_color(0, 0, 128)
        pdf.cell(0, 10, "Data Summary", ln=1)
        pdf.set_font("Arial", '', 12)
        pdf.set_text_color(0, 0, 0)
        pdf.cell(0, 10, f"Total records analyzed: {self.analysis_results['total_records']}", ln=1)
        pdf.cell(0, 10, f"Columns in dataset: {', '.join(self.analysis_results['columns'])}", ln=1)
        pdf.ln(5)
        
        # Numeric analysis
        if self.analysis_results['numeric_columns']:
            pdf.set_font("Arial", 'B', 14)
            pdf.set_text_color(0, 0, 128)
            pdf.cell(0, 10, "Numeric Analysis", ln=1)
            pdf.set_font("Arial", '', 12)
            pdf.set_text_color(0, 0, 0)
            
            for col in self.analysis_results['numeric_columns']:
                pdf.cell(0, 10, f"Average {col}: {self.analysis_results[f'avg_{col}']:.2f}", ln=1)
        
        # Sample data table
        pdf.ln(10)
        pdf.set_font("Arial", 'B', 14)
        pdf.set_text_color(0, 0, 128)
        pdf.cell(0, 10, "Sample Data (first 5 rows)", ln=1)
        
        # Create table header
        pdf.set_font("Arial", 'B', 12)
        pdf.set_fill_color(200, 220, 255)
        col_width = 40
        
        for col in self.analysis_results['columns']:
            pdf.cell(col_width, 10, col[:15], border=1, fill=True)
        pdf.ln()
        
        # Add table rows
        pdf.set_font("Arial", '', 10)
        pdf.set_text_color(0, 0, 0)
        for row in self.data[:5]:
            for col in self.analysis_results['columns']:
                pdf.cell(col_width, 10, str(row.get(col, ''))[:15], border=1)
            pdf.ln()
        
        # Footer
        pdf.ln(15)
        pdf.set_font("Arial", 'I', 10)
        pdf.set_text_color(100, 100, 100)
        pdf.cell(0, 10, "Automatically generated by CodTech Internship Task 2", 0, 0, 'C')
        
        # Save PDF
        pdf.output(self.output_file)
        print(f"Report successfully generated: {self.output_file}")
        return True

if __name__ == "__main__":
    # Example usage
    data_file = "sample_data.csv"  # Change this to your data file
    report_file = "analysis_report.pdf"
    
    print("Starting report generation...")
    generator = PDFReportGenerator(data_file, report_file)
    if generator.generate_report():
        print("Report generation completed successfully!")
    else:
        print("Report generation failed.")

id,name,age,salary,department
1,John Doe,28,55000,Marketing
2,Jane Smith,32,62000,Sales
3,Robert Johnson,45,78000,IT
4,Emily Davis,29,58000,HR
5,Michael Brown,38,72000,Finance
6,Sarah Wilson,41,68000,IT
7,David Lee,35,65000,Sales
8,Lisa Taylor,27,52000,Marketing
9,James Miller,31,60000,HR
10,Jennifer Clark,40,75000,Finance
